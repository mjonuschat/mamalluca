name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-**'  # Pre-release versions
      - 'v[0-9]+.[0-9]+.[0-9]+'     # Release versions
  workflow_dispatch:

env:
  BIN_NAME: mamalluca
  PROJECT_NAME: mamalluca
  REPO_NAME: mjonuschat/mamalluca
  BREW_TAP: jondot/homebrew-tap

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, aarch64-linux, x86_64-macos, aarch64-macos, x86_64-windows]
        include:
        - build: x86_64-linux
          os: ubuntu-22.04
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: aarch64-linux
          os: ubuntu-22.04
          target: aarch64-unknown-linux-gnu
          cross: true
        - build: x86_64-macos
          os: macos-latest
          target: x86_64-apple-darwin
          cross: false
        - build: aarch64-macos
          os: macos-latest
          target: aarch64-apple-darwin
        - build: x86_64-windows
          os: windows-2019
          target: x86_64-pc-windows-msvc
          cross: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2

      - name: Run cargo test
        if: matrix.build != 'aarch64-macos'
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: test
          target: ${{ matrix.target }}
          toolchain: stable
          args: "--locked --release"

      - name: Build release binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.target }}
          toolchain: stable
          args: "--locked --release"
          strip: true

      - name: Package as archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - name: Publish release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mamalluca-${{ matrix.build }}
          path: dist

  publish:
    if: ${{ github.event_name == 'push' }}
    permissions:
      contents: write
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/download-artifact@v4

      - run: ls -al mamalluca-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo "val={name}" >> $GITHUB_OUTPUT
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in mamalluca-* ; do
              platform=${dir#"mamalluca-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv mamalluca-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "%s=%s\n" tag-name "${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
